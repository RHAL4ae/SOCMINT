
version: "3.9"

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.3
    container_name: elasticsearch
    environment:
      - node.name=es01
      - cluster.name=socmint-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      socmint_network:
        aliases:
          - elasticsearch
    restart: unless-stopped

  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      socmint_network:
        aliases:
          - postgres
    restart: unless-stopped

  neo4j:
    image: neo4j:5.15.0
    container_name: neo4j
    environment:
      - NEO4J_AUTH=${NEO4J_AUTH}
    volumes:
      - neo4jdata:/data
    ports:
      - "7474:7474"
      - "7687:7687"
    networks:
      socmint_network:
        aliases:
          - neo4j
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      socmint_network:
        aliases:
          - zookeeper
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.5.2
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    networks:
      socmint_network:
        aliases:
          - kafka
    restart: unless-stopped

  spark-master:
    image: bitnami/spark:3.5.0
    container_name: spark-master
    environment:
      - SPARK_MODE=master
    ports:
      - "8080:8080"
    networks:
      socmint_network:
        aliases:
          - spark-master
    restart: unless-stopped

  spark-worker:
    image: bitnami/spark:3.5.0
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
    depends_on:
      - spark-master
    networks:
      socmint_network:
        aliases:
          - spark-worker
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    environment:
      - ENV_FILE=.env
    ports:
      - "8000:8000"
    networks:
      socmint_network:
        aliases:
          - backend
    restart: unless-stopped
    depends_on:
      - postgres
      - elasticsearch
      - kafka
      - neo4j
      - spark-master

  frontend:
    build:
      context: ./frontend_platform_all
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "80:80"
    networks:
      socmint_network:
        aliases:
          - frontend
    restart: unless-stopped

  tor:
    build:
      context: ./tor
      dockerfile: Dockerfile
    container_name: tor
    ports:
      - "9050:9050"
    volumes:
      - ./tor/torrc:/etc/tor/torrc
      - tor_data:/var/lib/tor
    networks:
      socmint_network:
        aliases:
          - tor
    restart: unless-stopped
    user: 100:100

  social_media_manager:
    build:
      context: ./backend/social_media_manager
      dockerfile: Dockerfile
    container_name: social_media_manager
    ports:
      - "8001:8000" # Assuming it runs on port 8000 internally, exposing on 8001
    networks:
      socmint_network:
        aliases:
          - social_media_manager
    restart: unless-stopped
    depends_on:
      - postgres
      - kafka

  data_collector:
    build:
      context: ./backend/data_collector
      dockerfile: Dockerfile
    container_name: data_collector
    ports:
      - "8002:8000" # Assuming it runs on port 8000 internally, exposing on 8002
    networks:
      socmint_network:
        aliases:
          - data_collector
    restart: unless-stopped
    depends_on:
      - kafka
      - tor

  auth_service:
    build:
      context: ./backend/auth_service
      dockerfile: Dockerfile
    container_name: auth_service
    ports:
      - "8003:8000" # Assuming it runs on port 8000 internally, exposing on 8003
    networks:
      socmint_network:
        aliases:
          - auth_service
    restart: unless-stopped
    depends_on:
      - postgres

  auth_uaepass:
    build:
      context: ./backend/auth_uaepass
      dockerfile: Dockerfile
    container_name: auth_uaepass
    ports:
      - "8004:8000" # Assuming it runs on port 8000 internally, exposing on 8004
    networks:
      socmint_network:
        aliases:
          - auth_uaepass
    restart: unless-stopped

  cyber_forensics_service:
    build:
      context: ./backend/cyber_forensics_service
      dockerfile: Dockerfile
    container_name: cyber_forensics_service
    ports:
      - "8005:8000" # Assuming it runs on port 8000 internally, exposing on 8005
    networks:
      socmint_network:
        aliases:
          - cyber_forensics_service
    restart: unless-stopped
    depends_on:
      - elasticsearch
      - neo4j

  financial_crime_service:
    build:
      context: ./backend/financial_crime_service
      dockerfile: Dockerfile
    container_name: financial_crime_service
    ports:
      - "8006:8000" # Assuming it runs on port 8000 internally, exposing on 8006
    networks:
      socmint_network:
        aliases:
          - financial_crime_service
    restart: unless-stopped
    depends_on:
      - postgres
      - kafka

  # Postiz App Services
  postiz-redis:
    image: redis:7-alpine
    container_name: postiz-redis-svc
    restart: always
    ports:
      - "6380:6379" # Postiz Redis on port 6380
    volumes:
      - postiz_redis_data:/data
    networks:
      socmint_network:
        aliases:
          - postiz-redis

  postiz-backend-svc:
    build:
      context: ./postiz_app
      dockerfile: Dockerfile.dev
    container_name: postiz-backend-svc
    command: pnpm --filter postiz-backend start
    env_file:
      - ./postiz.env
    ports:
      - "8007:3000" # Postiz backend on port 8007 (internal 3000)
    networks:
      socmint_network:
        aliases:
          - postiz-backend-svc
    depends_on:
      - postgres # Main SOCMINT postgres
      - postiz-redis
    restart: unless-stopped
    volumes:
      - ./postiz_app:/app

  postiz-frontend-svc:
    build:
      context: ./postiz_app
      dockerfile: Dockerfile.dev
    container_name: postiz-frontend-svc
    command: pnpm --filter postiz-frontend start
    env_file:
      - ./postiz.env
    ports:
      - "8081:4200" # Postiz frontend on port 8081 (internal 4200)
    networks:
      socmint_network:
        aliases:
          - postiz-frontend-svc
    depends_on:
      - postiz-backend-svc
    restart: unless-stopped
    volumes:
      - ./postiz_app:/app

  postiz-cron-svc:
    build:
      context: ./postiz_app
      dockerfile: Dockerfile.dev
    container_name: postiz-cron-svc
    command: pnpm --filter postiz-cron start
    env_file:
      - ./postiz.env
    networks:
      socmint_network:
        aliases:
          - postiz-cron-svc
    depends_on:
      - postgres # Main SOCMINT postgres
      - postiz-redis
      - postiz-backend-svc
    restart: unless-stopped
    volumes:
      - ./postiz_app:/app

  postiz-workers-svc:
    build:
      context: ./postiz_app
      dockerfile: Dockerfile.dev
    container_name: postiz-workers-svc
    command: pnpm --filter postiz-workers start
    env_file:
      - ./postiz.env
    networks:
      socmint_network:
        aliases:
          - postiz-workers-svc
    depends_on:
      - postgres # Main SOCMINT postgres
      - postiz-redis
      - postiz-backend-svc
    restart: unless-stopped
    volumes:
      - ./postiz_app:/app
  # End of Postiz App Services

volumes:
  esdata:
  pgdata:
  neo4jdata:
  tor_data:
  postiz_redis_data:

networks:
  socmint_network:
    driver: bridge